<?php

namespace AkademiaBundle\Repository;

/**
 * UsuariosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\DBAL\DBALException;
class UsuariosRepository extends \Doctrine\ORM\EntityRepository
{

	public function usuarioEliminar($usuarioId){
	    $query = "	UPDATE ACADEMIA.usuario
 					SET estado = 0
					WHERE id = $usuarioId ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    return "1";
	}

	public function editarUsuario($usuarioId,$perfilUsuario,$tipoDocumento,$numeroDocumento,$nombre,$apellidoPaterno,$apellidoMaterno,$telefono,$correo,$username,$password){

	    $query = "	UPDATE ACADEMIA.usuario 
					SET usuario='$username', contrasena ='$password',tipoDocumento='$tipoDocumento',telefono='$telefono',numeroDocumento='$numeroDocumento',apellidoPaterno='$apellidoPaterno',apellidoMaterno='$apellidoMaterno',correo='$correo',nombre='$nombre'
					WHERE id=$usuarioId; ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    return "1";
	}

public function updateUsuarioUbigeo($usuarioId, $ubicodigo, $newUbicodigo,$usuarioIdSis){

    	//try {
          $query="  UPDATE ACADEMIA.Usuario_Ubigeo 
					SET ubicodigo='$newUbicodigo',
						fecha_modificacion = getDate(),
						usuario_modifico = $usuarioIdSis
					WHERE ubicodigo='$ubicodigo' AND usuario_id = '$usuarioId';";

            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();

            $result = '1';
            return $result;

       // }catch (DBALException $e) {
       //     $message = $e->getCode();
		//return $message;
       // }
  	}

	public function insertUsuarioUbigeo($usuarioId, $ubicodigo,$usuarioIdSis){

    	try {
          $query="  INSERT INTO ACADEMIA.Usuario_Ubigeo(usuario_id,ubicodigo,usuario_crea)
					VALUES($usuarioId,$ubicodigo,$usuarioIdSis)";

            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();

            $result = '1';
            return $result;

        }catch (DBALException $e) {
            $message = $e->getCode();
            return $message;
        }
  	}

	public function removeUsuarioUbigeo($usuarioId){
		//try {
	        $query = "DELETE FROM ACADEMIA.Usuario_Ubigeo  WHERE usuario_id='$usuarioId';";
	        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	        $stmt->execute();
            $result = '1';
            return $result;
       //}catch (DBALException $e) {
        //    $message = $e->getCode();
        //    return $message;
        //}
    }

	public function insertUsuarioEdificacionDisciplina($usuarioId, $ediCodigo ,$usuarioIdSis){

    	try {
          $query="  INSERT INTO ACADEMIA.Usuario_EdificacionDisciplina(usuario_id,edi_codigo,usuario_crea)
					VALUES($usuarioId,$ediCodigo,$usuarioIdSis)";

            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();

            $result = '1';
            return $result;

        }catch (DBALException $e) {
            $message = $e->getCode();
            return $message;
        }
  	}

	public function removeUsuarioEdificacionDisciplina($usuarioId){
		//try {
	        $query = "DELETE FROM ACADEMIA.Usuario_EdificacionDisciplina  WHERE usuario_id='$usuarioId';";
	        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	        $stmt->execute();
            $result = '1';
            return $result;
       //}catch (DBALException $e) {
        //    $message = $e->getCode();
        //    return $message;
        //}
    }

	public function insertUsuarioUbigeoEdificacion($usuarioId, $complejoId,$usuarioIdSis){

    	try {
          $query="  INSERT INTO ACADEMIA.Usuario_Edificacion(usuario_id,ede_codigo,usuario_crea)
					VALUES($usuarioId,$complejoId,$usuarioIdSis)";

            $stmt = $this->getEntityManager()->getConnection()->prepare($query);
            $stmt->execute();

            $result = '1';
            return $result;

        }catch (DBALException $e) {
            $message = $e->getCode();
            return $message;
        }
  	}

	public function removeUsuarioEdificacion($usuarioId){
		//try {
	        $query = "DELETE FROM ACADEMIA.Usuario_Edificacion  WHERE usuario_id='$usuarioId';";
	        $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	        $stmt->execute();
            $result = '1';
            return $result;
       //}catch (DBALException $e) {
        //    $message = $e->getCode();
        //    return $message;
        //}
    }

	public function getUsuarioUbigeoByUsuarioId($usuarioId){
	    $query = "	SELECT 
  					CONVERT(VARCHAR(100),STUFF(( SELECT  ',' +
       				CONVERT(VARCHAR(100),usuUbi.ubicodigo)
          			FROM  ACADEMIA.Usuario_Ubigeo AS usuUbi
          			WHERE   usuUbi.usuario_id = usu.id
          			FOR XML PATH('') ), 1, 1, '') ) AS ubigeos
					FROM ACADEMIA.usuario usu
					WHERE usu.id = $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $ubigeoUsuario = $stmt->fetchAll();
	    return $ubigeoUsuario[0]['ubigeos'];
	}

	public function crearUsuario($tipoDocumento,$numeroDocumento,$nombre,$apellidoPaterno,$apellidoMaterno,$telefono,$correo,$username,$password,$coleccion,$perfilUsuario,$rol,$usuario,$confPerfilUsuario){

	    $query = "EXEC ACADEMIA.crearUsuario $tipoDocumento,'$numeroDocumento','$nombre','$apellidoPaterno','$apellidoMaterno',$telefono,'$correo','$username','$password',$perfilUsuario,1,'$rol' ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuarioEncontrado = $stmt->fetchAll();
	    $usuarioId = $usuarioEncontrado[0]['id'];

	    if(!empty($usuarioId)){

		    foreach ($coleccion as $key => $value) {

		    	if( $confPerfilUsuario['macro'] == $perfilUsuario || $confPerfilUsuario['monitor'] == $perfilUsuario  ){

			    	$query = "INSERT INTO ACADEMIA.Usuario_Ubigeo(usuario_id,ubicodigo,usuario_crea)
			    		VALUES($usuarioId,$value,$usuario)";
			   		$stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    	$stmt->execute();

	    		}else if( $confPerfilUsuario['promotor'] == $perfilUsuario ){

				    $query = "INSERT INTO ACADEMIA.Usuario_Edificacion(usuario_id,ede_codigo,usuario_crea)
				    		VALUES($usuarioId,$value,$usuario)";
				   	$stmt = $this->getEntityManager()->getConnection()->prepare($query);
				    $stmt->execute();

	    		}else if( $confPerfilUsuario['profesor'] == $perfilUsuario ){

				    $query = "INSERT INTO ACADEMIA.Usuario_EdificacionDisciplina(usuario_id,edi_codigo,usuario_crea)
				    		VALUES($usuarioId,$value,$usuario)";
				   	$stmt = $this->getEntityManager()->getConnection()->prepare($query);
				    $stmt->execute();
	    		} 
	    	}
	    	return "1";
	    }else{
	    	return "0";
	    }
	    	    
	}

	public function getIdDepartamentoUsuario($idUsuario){

	    $query = "SELECT ubiDpto.ubidpto
				FROM ACADEMIA.usuario usu
				INNER JOIN CATASTRO.edificacionesdeportivas  ede ON ede.ede_codigo= usu.id_complejo
				INNER JOIN grubigeo ubi on ubi.ubicodigo = ede.ubicodigo
				INNER JOIN grubigeo ubiProv on ubiProv.ubiprovincia = ubi.ubiprovincia 
				INNER JOIN grubigeo ubiDpto on ubiDpto.ubidpto = ubi.ubidpto
				WHERE

				usu.id='$idUsuario' AND
				ubi.ubidistrito <> '00' AND 
				ubi.ubiprovincia <> '00' AND 
				ubi.ubiprovincia <> '00' AND 

				ubiProv.ubidpto = ubi.ubidpto AND
				ubiProv.ubidistrito = '00' AND 
				ubiProv.ubiprovincia <> '00' AND 
				ubiProv.ubidpto <> '00' AND

				ubiDpto.ubidistrito = '00' AND 
				ubiDpto.ubiprovincia = '00' AND 
				ubiDpto.ubidpto <> '00'";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $idDepartamento = $stmt->fetchAll();
	    
	    return $idDepartamento;
	}

	public function getPerfilUsuariosAll(){

		$query = "SELECT *FROM ACADEMIA.perfilUsuario";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $perfilUsuarios = $stmt->fetchAll();
	    
	    return $perfilUsuarios;
	}

	public function verificarDuplicidadUsuarioEditar($username,$usuarioId){

		$query = "SELECT TOP 1 * FROM ACADEMIA.usuario WHERE usuario = '$username' AND id != $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}

	public function verificarDuplicidadUsuario($username){

		$query = "SELECT TOP 1 * FROM ACADEMIA.usuario WHERE usuario = '$username';";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}


	public function getUsuariosAll(){

		$query = "	SELECT *FROM ACADEMIA.usuario
					WHERE id_complejo IS NULL AND estado=1
					ORDER BY id DESC";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuarios = $stmt->fetchAll();
	    
	    return $usuarios;
	}

	public function getUsuariosProfesoresAll($complejoId,$temporadaId){

		$query = "	SELECT 
					usu.id usuarioId,
					dis.dis_descripcion disciplinaNombre,
					usu.nombre usuarioNombre,
					usu.correo usuarioCorreo,
					usu.telefono usuarioTelefono,
					usuEdi.edi_codigo ediCodigo,
					usu.id_perfil usuarioPerfilId,
					edi.ede_codigo complejoId
					FROM ACADEMIA.usuario usu
					INNER JOIN ACADEMIA.Usuario_EdificacionDisciplina usuEdi ON usuEdi.usuario_id = usu.id
					INNER JOIN CATASTRO.edificacionDisciplina edi ON edi.edi_codigo = usuEdi.edi_codigo
					INNER JOIN CATASTRO.disciplina dis ON dis.dis_codigo = edi.dis_codigo
					WHERE 
					id_complejo IS NULL 
					AND usu.estado = 1
					AND usu.id_perfil IN (5)
					AND edi.ede_codigo = $complejoId
					AND edi.temporada_id = $temporadaId
					ORDER BY usu.id DESC";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuarios = $stmt->fetchAll();
	    
	    return $usuarios;	
	}

	public function disciplinasByComplejoTemporada($complejoId,$temporadaId){

		$query = "	SELECT 
					dis.dis_codigo disciplinaId,
					dis.dis_descripcion disciplinaNombre,
					edi.edi_codigo ediCodigo
					FROM CATASTRO.edificacionesdeportivas ede
					INNER JOIN CATASTRO.edificacionDisciplina edi ON edi.ede_codigo = ede.ede_codigo
					INNER JOIN CATASTRO.disciplina dis ON dis.dis_codigo = edi.dis_codigo
					WHERE 
					ede.ede_codigo = $complejoId
					AND edi.temporada_id = $temporadaId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $disciplinas = $stmt->fetchAll();
	    
	    return $disciplinas;

	}

	public function getUsuarioById($usuarioId){

		$query = "	SELECT *FROM ACADEMIA.usuario
					WHERE id=$usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}

	public function getUsuarioDetalleUbigeoById($usuarioId){

		$query = "	SELECT 
					CASE usu.tipoDocumento
					WHEN '30' THEN 'DNI'
					WHEN '31' THEN 'Carnet Extranjeria'
					END tipoDocumento,
					usu.numeroDocumento numeroDocumento,
					usu.nombre nombreUsuario,
					usu.apellidoPaterno apellidoPaterno,
					usu.apellidoMaterno apellidoMaterno,
					usu.telefono telefono,
					usu.correo correo,
					usu.usuario username,
					usu.contrasena contrasena,
					usu.id_perfil perfilId,
					 CONVERT(VARCHAR(100),STUFF(( SELECT  ',' +
					CONVERT(VARCHAR(100),ubi.ubinombre)
					FROM  ACADEMIA.Usuario_Ubigeo AS usuUbi
					INNER JOIN grubigeo ubi ON ubi.ubicodigo = usuUbi.ubicodigo 
					WHERE   usuUbi.usuario_id = usu.id
					FOR XML PATH('') ), 1, 1, '') ) AS coleccion
					FROM ACADEMIA.usuario usu
					WHERE usu.id_complejo IS NULL AND usu.id_perfil IN (2,3)
					AND usu.id=$usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}

	public function getUsuarioDetalleEdificacionById($usuarioId){

		$query = "	SELECT 
					CASE usu.tipoDocumento
					WHEN '30' THEN 'DNI'
					WHEN '31' THEN 'Carnet Extranjeria'
					END tipoDocumento,
					usu.numeroDocumento numeroDocumento,
					usu.nombre nombreUsuario,
					usu.apellidoPaterno apellidoPaterno,
					usu.apellidoMaterno apellidoMaterno,
					usu.telefono telefono,
					usu.correo correo,
					usu.usuario username,
					usu.contrasena contrasena,
					usu.id_perfil perfilId,
					 CONVERT(VARCHAR(100),STUFF(( SELECT  ',' +
					CONVERT(VARCHAR(100),ede.ede_nombre)
					FROM  ACADEMIA.Usuario_Edificacion AS usuEde
					INNER JOIN CATASTRO.edificacionesdeportivas ede ON ede.ede_codigo = usuEde.ede_codigo 
					WHERE   usuEde.usuario_id = usu.id
					FOR XML PATH('') ), 1, 1, '') ) AS coleccion
					FROM ACADEMIA.usuario usu
					WHERE usu.id_complejo IS NULL AND usu.id_perfil IN (4) 
					AND usu.id=$usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}

	public function getUsuarioDetalleEdificacionDisciplinaById($usuarioId){

		$query = "	SELECT 
					CASE usu.tipoDocumento
					WHEN '30' THEN 'DNI'
					WHEN '31' THEN 'Carnet Extranjeria'
					END tipoDocumento,
					usu.numeroDocumento numeroDocumento,
					usu.nombre nombreUsuario,
					usu.apellidoPaterno apellidoPaterno,
					usu.apellidoMaterno apellidoMaterno,
					usu.telefono telefono,
					usu.correo correo,
					usu.usuario username,
					usu.contrasena contrasena,
					usu.id_perfil perfilId,
					 CONVERT(VARCHAR(100),STUFF(( SELECT  ',' +
					CONVERT(VARCHAR(100),dis.dis_descripcion)
					FROM  ACADEMIA.Usuario_EdificacionDisciplina AS usuEdi
					INNER JOIN CATASTRO.edificacionDisciplina edi ON edi.edi_codigo = usuEdi.edi_codigo
					INNER JOIN CATASTRO.disciplina dis ON dis.dis_codigo = edi.dis_codigo 
					WHERE   usuEdi.usuario_id = usu.id
					FOR XML PATH('') ), 1, 1, '') ) AS coleccion
					FROM ACADEMIA.usuario usu
					WHERE usu.id_complejo IS NULL AND usu.id_perfil IN (5) 
					AND usu.id = $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;
	}

	public function getUbigeoByUsuarioId($usuarioId){

		$query = "	SELECT 
					usuUbi.ubicodigo ubicodigo,
					usuUbi.usuario_id usuarioId,
					ubi.ubinombre nombreUbigeo
					 FROM ACADEMIA.Usuario_Ubigeo usuUbi
					INNER JOIN grubigeo ubi ON ubi.ubicodigo = usuUbi.ubicodigo
					WHERE usuario_id = $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $ubigeoUsuario = $stmt->fetchAll();
	    
	    return $ubigeoUsuario;
	}

	public function getEdificacionByUsuarioId($usuarioId){

		$query = "	SELECT 
					usuEde.ede_codigo complejoId,
					usuEde.usuario_id usuarioId,
					ede.ede_nombre complejoNombre
					FROM ACADEMIA.Usuario_Edificacion usuEde
					INNER JOIN CATASTRO.edificacionesdeportivas ede  ON ede.ede_codigo = usuEde.ede_codigo
					WHERE usuEde.usuario_id = $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $edeUsuario = $stmt->fetchAll();
	    
	    return $edeUsuario;
	}

	public function getDisciplinaByUsuarioId($usuarioId){

		$query = "	SELECT 
					usuEdi.edi_codigo ediCodigo,
					edi.ede_codigo complejoId,
					edi.temporada_id temporadaId,
					usuEdi.usuario_id usuarioId,
					dis.dis_descripcion disciplinaNombre
					FROM ACADEMIA.Usuario_EdificacionDisciplina usuEdi
					INNER JOIN CATASTRO.edificacionDisciplina edi  ON edi.edi_codigo= usuEdi.edi_codigo
					INNER JOIN CATASTRO.disciplina dis ON dis.dis_codigo = edi.dis_codigo
					WHERE usuEdi.usuario_id = $usuarioId;";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $edeUsuario = $stmt->fetchAll();
	    
	    return $edeUsuario;
	}

}
