<?php

namespace AkademiaBundle\Repository;

/**
 * UsuariosRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\DBAL\DBALException;
class UsuariosRepository extends \Doctrine\ORM\EntityRepository
{

	public function crearUsuario($tipoDocumento,$numeroDocumento,$nombre,$apellidoPaterno,$apellidoMaterno,$telefono,$correo,$username,$password,$coleccion,$perfilUsuario,$rol,$usuario,$confPerfilUsuario){

	    $query = "EXEC ACADEMIA.crearUsuario $tipoDocumento,'$numeroDocumento','$nombre','$apellidoPaterno','$apellidoMaterno',$telefono,'$correo','$username','$password',$perfilUsuario,1,'$rol' ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuarioEncontrado = $stmt->fetchAll();

	    $usuarioId = $usuarioEncontrado[0]['id'];

	    if(!empty($usuarioId)){

		    foreach ($coleccion as $key => $value) {

		    	if( $confPerfilUsuario['macro'] == $perfilUsuario || $confPerfilUsuario['monitor'] == $perfilUsuario  ){

			    	$query = "INSERT INTO ACADEMIA.Usuario_Ubigeo(usuario_id,ubicodigo,usuario_crea)
			    		VALUES($usuarioId,$value,$usuario)";
			   		$stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    	$stmt->execute();

	    		}else if( $confPerfilUsuario['promotor'] == $perfilUsuario ){

				    $query = "INSERT INTO ACADEMIA.Usuario_Edificacion(usuario_id,ede_codigo,usuario_crea)
				    		VALUES($usuarioId,$value,$usuario)";
				   	$stmt = $this->getEntityManager()->getConnection()->prepare($query);
				    $stmt->execute();
	    		} 
	    	}
	    	return "1";
	    }else{
	    	return "0";
	    }
	    	    
	}

	public function getIdDepartamentoUsuario($idUsuario){

	    $query = "SELECT ubiDpto.ubidpto
				FROM ACADEMIA.usuario usu
				INNER JOIN CATASTRO.edificacionesdeportivas  ede ON ede.ede_codigo= usu.id_complejo
				INNER JOIN grubigeo ubi on ubi.ubicodigo = ede.ubicodigo
				INNER JOIN grubigeo ubiProv on ubiProv.ubiprovincia = ubi.ubiprovincia 
				INNER JOIN grubigeo ubiDpto on ubiDpto.ubidpto = ubi.ubidpto
				WHERE

				usu.id='$idUsuario' AND
				ubi.ubidistrito <> '00' AND 
				ubi.ubiprovincia <> '00' AND 
				ubi.ubiprovincia <> '00' AND 

				ubiProv.ubidpto = ubi.ubidpto AND
				ubiProv.ubidistrito = '00' AND 
				ubiProv.ubiprovincia <> '00' AND 
				ubiProv.ubidpto <> '00' AND

				ubiDpto.ubidistrito = '00' AND 
				ubiDpto.ubiprovincia = '00' AND 
				ubiDpto.ubidpto <> '00'";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $idDepartamento = $stmt->fetchAll();
	    
	    return $idDepartamento;
	}

	public function getPerfilUsuariosAll(){

		$query = "SELECT *FROM ACADEMIA.perfilUsuario";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $perfilUsuarios = $stmt->fetchAll();
	    
	    return $perfilUsuarios;
	}

	public function verificarDuplicidadUsuario($username){

		$query = "SELECT TOP 1 * FROM ACADEMIA.usuario WHERE usuario = '$username';";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuario = $stmt->fetchAll();
	    
	    return $usuario;

	}


	public function getUsuariosAll(){

		$query = "	SELECT *FROM ACADEMIA.usuario
					WHERE id_complejo IS NULL 
					ORDER BY id DESC";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $usuarios = $stmt->fetchAll();
	    
	    return $usuarios;
	}

}
