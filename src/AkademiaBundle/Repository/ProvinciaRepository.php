<?php

namespace AkademiaBundle\Repository;

/**
 * ProvinciaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProvinciaRepository extends \Doctrine\ORM\EntityRepository
{

	public function getprovincesPublicGeneralByDisability($disability,$ageBeneficiario){

	    $query = "SELECT DISTINCT ubiDpto.ubidpto idDepartamento, 
					ubiProv.ubiprovincia idProvincia,
					ubiProv.ubinombre nombreProvincia
					
	                FROM  ACADEMIA.horario AS hor 
	                INNER JOIN CATASTRO.edificacionDisciplina AS edi ON edi.edi_codigo = hor.edi_codigo
	                INNER JOIN CATASTRO.edificacionesdeportivas AS ede ON ede.ede_codigo = edi.ede_codigo
	                INNER JOIN grubigeo AS ubi ON ubi.ubicodigo = ede.ubicodigo
	                INNER JOIN grubigeo AS ubiDpto ON ubiDpto.ubidpto = ubi.ubidpto
	                INNER JOIN grubigeo AS ubiProv ON ubiProv.ubiprovincia = ubi.ubiprovincia
	                WHERE

	                hor.estado = 1 AND 
	                hor.discapacitados = '$disability' AND
	                hor.vacantes <> 0 AND
	                hor.convocatoria = 1 AND
	                hor.etapa = 1 AND

	                ubiDpto.ubidpto <> '00' AND 
	                ubiDpto.ubidistrito ='00' AND
	                ubiDpto.ubiprovincia ='00' AND
	                
	                ubiProv.ubidpto = ubi.ubidpto AND
	                ubiProv.ubidpto <> '00' AND
	                ubiProv.ubiprovincia <> '00' AND
	                ubiProv.ubidistrito = '00' AND
	                
	                ubi.ubidistrito <> '00' AND 
	                ubi.ubiprovincia <> '00' AND 
	                ubi.ubiprovincia <> '00' AND 
	                
	                '$ageBeneficiario' <= hor.edadMaxima AND 
                    '$ageBeneficiario' >= hor.edadMinima ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $provincias = $stmt->fetchAll();
	    
	    return $provincias;
	}

	public function getProvincesPromotorByDisability($disability,$ageBeneficiario){

	    $query = "SELECT DISTINCT ubiDpto.ubidpto idDepartamento, 
					ubiProv.ubiprovincia idProvincia,
					ubiProv.ubinombre nombreProvincia

	                FROM  ACADEMIA.horario AS hor 
	                INNER JOIN CATASTRO.edificacionDisciplina AS edi ON edi.edi_codigo = hor.edi_codigo
	                INNER JOIN CATASTRO.edificacionesdeportivas AS ede ON ede.ede_codigo = edi.ede_codigo
	                INNER JOIN grubigeo AS ubi ON ubi.ubicodigo = ede.ubicodigo
	                INNER JOIN grubigeo AS ubiDpto ON ubiDpto.ubidpto = ubi.ubidpto
	                INNER JOIN grubigeo AS ubiProv ON ubiProv.ubiprovincia = ubi.ubiprovincia
	                WHERE

	                hor.estado = 1 AND
	                hor.convocatoria = 1 AND 
	                hor.discapacitados = '$disability' AND
	                hor.vacantes <> 0 AND

	                ubiDpto.ubidpto <> '00' AND 
	                ubiDpto.ubidistrito ='00' AND
	                ubiDpto.ubiprovincia ='00' AND
	                
	                ubiProv.ubidpto = ubi.ubidpto AND
	                ubiProv.ubidpto <> '00' AND
	                ubiProv.ubiprovincia <> '00' AND
	                ubiProv.ubidistrito = '00' AND
	                
	                ubi.ubidistrito <> '00' AND 
	                ubi.ubiprovincia <> '00' AND 
	                ubi.ubiprovincia <> '00' AND

	                '$ageBeneficiario' <= hor.edadMaxima AND 
                    '$ageBeneficiario' >= hor.edadMinima ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $provincias = $stmt->fetchAll();
	    
	    return $provincias;
	}
	

	public function getProvincesLandingByDisability($disability){

	    $query = "SELECT DISTINCT ubiDpto.ubidpto idDepartamento, 
					ubiProv.ubiprovincia idProvincia,
					ubiProv.ubinombre nombreProvincia

	                FROM  ACADEMIA.horario AS hor 
	                INNER JOIN CATASTRO.edificacionDisciplina AS edi ON edi.edi_codigo = hor.edi_codigo
	                INNER JOIN CATASTRO.edificacionesdeportivas AS ede ON ede.ede_codigo = edi.ede_codigo
	                INNER JOIN grubigeo AS ubi ON ubi.ubicodigo = ede.ubicodigo
	                INNER JOIN grubigeo AS ubiDpto ON ubiDpto.ubidpto = ubi.ubidpto
	                INNER JOIN grubigeo AS ubiProv ON ubiProv.ubiprovincia = ubi.ubiprovincia
	                WHERE

	                hor.estado = 1 AND 
	                hor.discapacitados = '$disability' AND
	                hor.vacantes <> 0 AND
	                hor.convocatoria = 1 AND
	                
	                ubiDpto.ubidpto <> '00' AND 
	                ubiDpto.ubidistrito ='00' AND
	                ubiDpto.ubiprovincia ='00' AND
	                
	                ubiProv.ubidpto = ubi.ubidpto AND
	                ubiProv.ubidpto <> '00' AND
	                ubiProv.ubiprovincia <> '00' AND
	                ubiProv.ubidistrito = '00' AND
	                
	                ubi.ubidistrito <> '00' AND 
	                ubi.ubiprovincia <> '00' AND 
	                ubi.ubiprovincia <> '00' ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $provincias = $stmt->fetchAll();
	    
	    return $provincias;
	}

	public function provinciasAll(){
		
    	$query = "SELECT ubidpto as idDepartamento,ubiprovincia as idProvincia , ubinombre as nombreProvincia from grubigeo 
				where ubidistrito='00' AND ubidpto!='00' AND ubiprovincia!='00';";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $provincias = $stmt->fetchAll();
	    
	    return $provincias;
	
	}
}
