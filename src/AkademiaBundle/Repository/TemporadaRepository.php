<?php

namespace AkademiaBundle\Repository;

/**
 * TemporadaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
use Doctrine\DBAL\DBALException;
class TemporadaRepository extends \Doctrine\ORM\EntityRepository
{

	public function validarFichaToTemporada($idFicha,$idTemporada){

		try {
			
			$query = "	SELECT  CASE temp.id 
						WHEN '$idTemporada' THEN 1
						ELSE
						0
						END as flagPertenece
						FROM ACADEMIA.inscribete ins
						INNER JOIN ACADEMIA.horario hor ON hor.id = ins.horario_id
						INNER JOIN CATASTRO.edificacionDisciplina edi ON edi.edi_codigo = hor.edi_codigo
						INNER JOIN ACADEMIA.temporada temp ON temp.id = edi.temporada_id
						WHERE ins.id = '$idFicha' ";
					
		    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
		    $stmt->execute();
		    $descripcionTemporada = $stmt->fetchAll();
       		return $descripcionTemporada;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function getDescripcionTemporadaById($idTemporada){

		try {
			
			$query = "SELECT	temp.anio anio,
								cic.descripcion ciclo,
								CASE MONTH(temp.inicio_clases)
								WHEN 1 THEN 'Enero'
								WHEN 2 THEN 'Febrero'
								WHEN 3 THEN 'Marzo'
								WHEN 4 THEN 'Abril'
								WHEN 5 THEN 'Mayo'
								WHEN 6 THEN 'Junio'
								WHEN 7 THEN 'Julio'
								WHEN 8 THEN 'Agosto'
								WHEN 9 THEN 'Septiembre'
								WHEN 10 THEN 'Octubre'
								WHEN 11 THEN 'Noviembre'
								WHEN 12 THEN 'Diciembre'
								END AS mesInicio,
								CASE MONTH(temp.cierre_clases)
								WHEN 1 THEN 'Enero'
								WHEN 2 THEN 'Febrero'
								WHEN 3 THEN 'Marzo'
								WHEN 4 THEN 'Abril'
								WHEN 5 THEN 'Mayo'
								WHEN 6 THEN 'Junio'
								WHEN 7 THEN 'Julio'
								WHEN 8 THEN 'Agosto'
								WHEN 9 THEN 'Septiembre'
								WHEN 10 THEN 'Octubre'
								WHEN 11 THEN 'Noviembre'
								WHEN 12 THEN 'Diciembre'
								END AS mesFin,
								CASE temp.ciclo_id
								WHEN 1 THEN 'I'
								WHEN 2 THEN 'II'
								END AS ciclo_romanos
						 FROM ACADEMIA.temporada temp
						INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
						WHERE temp.id = '$idTemporada'; ";
					
		    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
		    $stmt->execute();
		    $descripcionTemporada = $stmt->fetchAll();
       		return $descripcionTemporada;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function getDescripcionTemporadaByFicha($idFicha){

		try {
			
			$query = "	SELECT 	temp.anio anio,
								cic.descripcion ciclo 
								FROM ACADEMIA.inscribete ins
						INNER JOIN ACADEMIA.horario hor ON hor.id = ins.horario_id
						INNER JOIN CATASTRO.edificacionDisciplina edi ON edi.edi_codigo = hor.edi_codigo
						INNER JOIN ACADEMIA.temporada temp ON temp.id = edi.temporada_id
						INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
						WHERE ins.id='$idFicha' ";
					
		    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
		    $stmt->execute();
		    $descripcionTemporada = $stmt->fetchAll();
       		return $descripcionTemporada;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function temporadaProxima(){

		try {
				$query = "	SELECT  TOP 1 CONVERT(VARCHAR,pre_inscripciones,103) fecha_preinscripcion,
										anio,
										cic.descripcion ciclo
							FROM ACADEMIA.temporada temp
							INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
							WHERE GETDATE() < pre_inscripciones
							ORDER BY pre_inscripciones ASC
						";

			    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    $stmt->execute();
			    $temporadaProxima = $stmt->fetchAll();
           		return $temporadaProxima;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function faseTemporadaActiva($id){

        try {
				$query = "	SELECT 
								CASE 
							    WHEN  GETDATE() >= apertura  AND GETDATE() < pre_inscripciones THEN 10
							    WHEN  GETDATE()  >= pre_inscripciones  AND GETDATE() < inicio_clases THEN 20
							    WHEN  GETDATE()  >= inicio_clases AND GETDATE() < cierre_clases THEN 30
							    ELSE
							    40
								END AS fase 
								FROM ACADEMIA.temporada WHERE id = '$id';";

			    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    $stmt->execute();
			    $faseTemporadaActiva = $stmt->fetchAll();
           		return $faseTemporadaActiva;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function getFechaPreInscripcion($idTemproada){

		try {
				$query = "	SELECT 
							CONVERT(VARCHAR,pre_inscripciones,103) fecha_preinscripcion,
							anio,
							cic.descripcion ciclo
							FROM ACADEMIA.temporada temp
							INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
							WHERE temp.id = '$idTemproada' AND temp.estado = 1";
			    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    $stmt->execute();
			    $fechaPreInscripcion = $stmt->fetchAll();
           		return $fechaPreInscripcion;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function getTemporadaActiva(){

        try {
				$query = "	SELECT temp.id temporadaId
							FROM ACADEMIA.temporada temp WHERE estado = 1;";

			    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    $stmt->execute();
			    $temporadaActiva = $stmt->fetchAll();
           		return $temporadaActiva;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}

	public function getTemporadasHabilitadas(){

        try {
				$query = "	SELECT temp.id temporadaId, cic.descripcion ciclo, temp.anio anio
							FROM ACADEMIA.temporada temp
							INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
							WHERE
							GETDATE() BETWEEN apertura AND fecha_subsanacion ORDER BY temp.id DESC";

			    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
			    $stmt->execute();
			    $temporadas = $stmt->fetchAll();
           		return $temporadas;

        }catch (DBALException $e) {
          $message = $e->getCode();
        }

        return $message;
	}


	public function crearTemporada($crearAnio,$crearCiclo,$crearApertura,$crearPreInscripcion,$crearInicioClases,$crearCierreClases,$crearFechaSubsanacion,$usuario){

            try {
					$query = "	EXEC ACADEMIA.crearTemporada $crearAnio,$crearCiclo,'$crearApertura','$crearPreInscripcion','$crearInicioClases','$crearCierreClases','$crearFechaSubsanacion','$usuario' ";
				    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
				    $stmt->execute();
               		$temporadas = $stmt->fetchAll();
               		return $temporadas[0]['estadoCrear'];

            }catch (DBALException $e) {
              $message = $e->getCode();
            }

            return $message;
	}


	public function updateTemporada($editarAnio,$editarCiclo,$editarApertura,$editarPreInscripcion,$editarInicioClases,$editarCierreClases,$editarFechaSubsanacion,$idTemporada,$usuario){

            try {
					$query = "	EXEC ACADEMIA.updateTemporada $editarAnio,$editarCiclo,'$editarApertura','$editarPreInscripcion','$editarInicioClases','$editarCierreClases','$editarFechaSubsanacion',$idTemporada, $usuario ";
				    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
				    $stmt->execute();
				    $temporadas = $stmt->fetchAll();
				    
               		return $temporadas[0]['estadoModificar'];

            }catch (DBALException $e) {
              $message = $e->getCode();
            }

            return $message;
	}

	public function getTemporadas(){

		$query = "	SELECT	temp.id,
							temp.anio,
							cic.descripcion ciclo,
							temp.ciclo_id cicloId,
							CONVERT(varchar,temp.apertura,105) apertura,
							CONVERT(varchar,temp.pre_inscripciones,105) pre_inscripciones,
							CONVERT(varchar,temp.inicio_clases,105) inicio_clases,
							CONVERT(varchar,temp.cierre_clases,105) cierre_clases,
							CONVERT(varchar,temp.fecha_subsanacion,105) subsanacion,
							CONVERT(VARCHAR,CONVERT(int,CONVERT( VARCHAR,DATEDIFF(month,temp.apertura,temp.cierre_clases) ))+1)+' meses' duracion,
							temp.estado
					FROM ACADEMIA.temporada temp
					INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id ORDER BY temp.id DESC";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $temporadas = $stmt->fetchAll();
	    
	    return $temporadas;
	}

	public function getCantidadMesesTemporadaEnCurso($idTemporada){

		$query = "	SELECT	
					MONTH(temp.inicio_clases) mes_inicio_temporada,
					MONTH(temp.cierre_clases) mes_fin_temporada 
					FROM ACADEMIA.temporada temp
					INNER JOIN ACADEMIA.ciclo cic ON cic.id = temp.ciclo_id
					WHERE temp.id = $idTemporada; ";
	    
	    $stmt = $this->getEntityManager()->getConnection()->prepare($query);
	    $stmt->execute();
	    $mesesTemporada = $stmt->fetchAll();
	    
	    return $mesesTemporada;
	}
}
